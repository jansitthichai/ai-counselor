'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'

interface WordQuestion {
  word: string
  meaning: string
  options: string[]
  correctAnswer: string
}

const wordQuestions: WordQuestion[] = [
  {
    word: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç',
    meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à',
    options: ['Sadness', 'Happiness', 'Anger', 'Fear'],
    correctAnswer: 'Happiness'
  },
  {
    word: '‡∏™‡∏±‡∏ô‡∏ï‡∏¥‡∏†‡∏≤‡∏û',
    meaning: '‡∏™‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏á‡∏ö‡∏™‡∏∏‡∏Ç ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á',
    options: ['War', 'Conflict', 'Peace', 'Chaos'],
    correctAnswer: 'Peace'
  },
  {
    word: '‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û',
    meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô',
    options: ['Hatred', 'Friendship', 'Jealousy', 'Misunderstanding'],
    correctAnswer: 'Friendship'
  },
  {
    word: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á',
    meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï',
    options: ['Despair', 'Hope', 'Fear', 'Anxiety'],
    correctAnswer: 'Hope'
  },
  {
    word: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å',
    meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡∏ï‡πà‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏™‡∏¥‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á',
    options: ['Hatred', 'Love', 'Indifference', 'Fear'],
    correctAnswer: 'Love'
  },
  {
    word: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏ï‡∏ï‡∏≤',
    meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡πá‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô',
    options: ['Cruelty', 'Compassion', 'Selfishness', 'Indifference'],
    correctAnswer: 'Compassion'
  },
  {
    word: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô',
    meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏•‡∏≥‡∏ö‡∏≤‡∏Å‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ',
    options: ['Impatience', 'Patience', 'Laziness', 'Irresponsibility'],
    correctAnswer: 'Patience'
  },
  {
    word: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì',
    meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡πÜ',
    options: ['Dissatisfaction', 'Gratitude', 'Jealousy', 'Indifference'],
    correctAnswer: 'Gratitude'
  },
  {
    word: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô',
    meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ',
    options: ['Insecurity', 'Confidence', 'Fear', 'Anxiety'],
    correctAnswer: 'Confidence'
  },
  {
    word: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    meaning: '‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏•‡∏∏‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡πÑ‡∏ß‡πâ',
    options: ['Failure', 'Success', 'Disappointment', 'Frustration'],
    correctAnswer: 'Success'
  }
]

export default function WordGame() {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [score, setScore] = useState(0)
  const [showResult, setShowResult] = useState(false)
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null)
  const [isCorrect, setIsCorrect] = useState<boolean | null>(null)
  const [gameComplete, setGameComplete] = useState(false)

  const currentQuestion = wordQuestions[currentQuestionIndex]

  const handleAnswerSelect = (answer: string) => {
    if (selectedAnswer) return // Prevent multiple selections

    setSelectedAnswer(answer)
    const correct = answer === currentQuestion.correctAnswer
    setIsCorrect(correct)
    
    if (correct) {
      setScore(prev => prev + 10)
    }

    // Show result for 2 seconds then move to next question
    setTimeout(() => {
      setSelectedAnswer(null)
      setIsCorrect(null)
      
      if (currentQuestionIndex < wordQuestions.length - 1) {
        setCurrentQuestionIndex(prev => prev + 1)
      } else {
        setGameComplete(true)
      }
    }, 2000)
  }

  const restartGame = () => {
    setCurrentQuestionIndex(0)
    setScore(0)
    setShowResult(false)
    setSelectedAnswer(null)
    setIsCorrect(null)
    setGameComplete(false)
  }

  const getProgressPercentage = () => {
    return ((currentQuestionIndex + 1) / wordQuestions.length) * 100
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-blue-50">
      <div className="container mx-auto px-4 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8"
        >
          <h1 className="text-4xl font-bold text-gray-800 mb-4 font-sarabun">‡πÄ‡∏Å‡∏°‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå</h1>
          <p className="text-lg text-gray-600 mb-6">‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå</p>
        </motion.div>

        <div className="max-w-2xl mx-auto">
          {/* Progress Bar */}
          <div className="mb-8">
            <div className="flex justify-between text-sm text-gray-600 mb-2">
              <span>‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° {currentQuestionIndex + 1} ‡∏à‡∏≤‡∏Å {wordQuestions.length}</span>
              <span>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score}</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <motion.div
                className="bg-blue-500 h-2 rounded-full"
                initial={{ width: 0 }}
                animate={{ width: `${getProgressPercentage()}%` }}
                transition={{ duration: 0.5 }}
              />
            </div>
          </div>

          {!gameComplete ? (
            <motion.div
              key={currentQuestionIndex}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              className="bg-white rounded-xl shadow-lg p-8"
            >
              {/* Question */}
              <div className="text-center mb-8">
                <h2 className="text-3xl font-bold text-gray-800 mb-4">{currentQuestion.word}</h2>
                <p className="text-lg text-gray-600">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: {currentQuestion.meaning}</p>
              </div>

              {/* Answer Options */}
              <div className="space-y-4">
                {currentQuestion.options.map((option, index) => (
                  <motion.button
                    key={index}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => handleAnswerSelect(option)}
                    disabled={selectedAnswer !== null}
                    className={`w-full p-4 rounded-lg text-left transition-all duration-200 ${
                      selectedAnswer === option
                        ? isCorrect
                          ? 'bg-green-500 text-white'
                          : 'bg-red-500 text-white'
                        : selectedAnswer && option === currentQuestion.correctAnswer
                        ? 'bg-green-500 text-white'
                        : 'bg-gray-100 hover:bg-gray-200 text-gray-800'
                    }`}
                  >
                    <span className="font-semibold">{String.fromCharCode(65 + index)}. </span>
                    {option}
                  </motion.button>
                ))}
              </div>

              {/* Feedback */}
              {selectedAnswer && (
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className={`mt-6 p-4 rounded-lg text-center ${
                    isCorrect ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                  }`}
                >
                  {isCorrect ? '‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!' : '‚ùå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'}
                  <div className="mt-2">
                    ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠: <strong>{currentQuestion.correctAnswer}</strong>
                  </div>
                </motion.div>
              )}
            </motion.div>
          ) : (
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              className="bg-white rounded-xl shadow-lg p-8 text-center"
            >
              <h2 className="text-3xl font-bold text-gray-800 mb-4">‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß!</h2>
              <div className="text-6xl mb-4">
                {score >= 80 ? 'üéâ' : score >= 60 ? 'üëç' : 'üí™'}
              </div>
              <p className="text-xl text-gray-600 mb-4">
                ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: <span className="font-bold text-blue-600">{score}</span> / {wordQuestions.length * 10}
              </p>
              <p className="text-lg text-gray-600 mb-6">
                {score >= 80 ? '‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡∏î‡∏µ‡∏°‡∏≤‡∏Å' :
                 score >= 60 ? '‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ' :
                 '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£! ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á'}
              </p>
              <button
                onClick={restartGame}
                className="bg-blue-500 text-white px-8 py-3 rounded-lg text-lg font-semibold hover:bg-blue-600 transition-colors"
              >
                ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
              </button>
            </motion.div>
          )}

          {/* Game Info */}
          <div className="mt-8 bg-gradient-to-r from-blue-50 to-green-50 p-6 rounded-lg">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏°</h3>
            <p className="text-gray-600 mb-3">
              ‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ 
              ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            </p>
            <div className="text-sm text-gray-500">
              <p>‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 4 ‡∏Ç‡πâ‡∏≠</p>
              <p>‚Ä¢ ‡πÑ‡∏î‡πâ 10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</p>
              <p>‚Ä¢ ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {wordQuestions.length} ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 